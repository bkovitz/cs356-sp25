How to set up your computer so you can build and run the software in this
repository under VSCode.

These instructions are not complete. They're our best approximation as of
18-Feb-2025. See the bottom of this file for a list of known omissions.


1. Outside of VSCode:

   1.1 Install CMake.

   1.2 Install a C++ compiler.

      On Windows:
         Install Visual Studio Community 2022, C++20.
         gcc might work, too.

      On Mac:
         Install clang (maybe through XCode, maybe brew).

   1.3 Install VSCode.

   1.4 Install Qt.

      Windows:
         Prefer "online install", otherwise you have to build the whole thing
         from source. Just get "Qt", not any of the other options. Select also
         the "CMake" option under "Build Tools". The install directory should be C:\Qt

      Mac:
         'brew install qt' might work.

2. In VSCode:

   "C-Shift-P" below means Ctrl-Shift-P on Windows and Linux, Cmd-Shift-P on
   Mac.

   To run VSCode, cd into the directory where you want to make a project and
   run 'code .'

   2.1 Install the Microsoft C/C++ Tools extension.

   2.2 Install the Microsoft CMake Tools extension.

   2.3 Install the Qt C++, Qt Core, Qt Extension Pack, Qt Qml, and Qt UI from Qt Group

   2.4 Put in a Qt "Hello World" source code by copying/pasting/editing.
   Maybe get Claude.ai to write it for you. Or use what we already have in
   this directory.

   2.5 Set up a CMakeLists.txt file. (Claude.ai may already have written one
   for you. There's one already provided in this directory.)

   2.6 Press C-Shift-P and type/select: CMake: Select Kit to choose the
   compiler.
      Windows: Visual Studio Community 2022 Release amd64-x86  or  gcc
      Mac: clang

   2.7 Windows only:
      Go to settings (click the gear icon in the lower left of the VSCode window).
      Search for "cmake configure args". Click Add Item. Put in:
         C:\Qt\6.8.2\msvc2022_64
      and click OK.

      In your Windows environment variables (Windows+X System, Advanced System
      Settings, Environment Variables):
         Add C:\Qt64\msvc2022_64\bin to Path
         Make a new environment variable, CMAKE_PREFIX_PATH, and set it to
         C:\Qt64\msvc2022_64
      You can set either the user or the system environment variables.

      Restart VSCode.

   2.8 Press C-Shift-P and type/select: CMake: Configure to get VSCode to
   read your CMakeLists.txt file. You'll need to do this each time you
   modify CMakeLists.txt.

----
THE BELOW MIGHT ALL BE FIXED NOW  (19-Feb-2025)

Some known omissions from the above (we're still looking for info from
authoritative sources):

   How to tell CMake and/or VSCode where your compiler is.

   How to tell CMake and/or VSCode where your Qt library is.

   How to tell CMake where your Qt6 CMake config file is.

   How to get the CMake tools in VSCode to put some helpful buttons along the
   bottom of the VSCode window.

If you're having problems, one tip is to temporarily ignore VSCode and just
get a tiny C++ "Hello World" program to compile in CMake directly from the
command line. That will shake out getting CMake to find the C++ compiler.
Then get a tiny Qt app to compile under CMake directly from the command line.
That will shake out getting CMake to tell the C++ compiler where the Qt
library is. With that working, then it should be easier to figure out how to
tell VSCode how to run the whole process. You will have reached ultimate
success when you can edit, build, and debug your Qt application in VSCode.
